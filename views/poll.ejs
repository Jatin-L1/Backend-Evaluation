<%- include('partials/header') %>
<style>
  .vote-list {
    max-height: 300px;
    overflow-y: auto;
    margin: 15px 0;
    padding: 10px;
    border: 1px solid #e9ecef;
    border-radius: 4px;
    background-color: #ffffff;
  }

  .vote-item {
    display: flex;
    align-items: flex-start;
    padding: 10px;
    border-bottom: 1px solid #eee;
    margin-bottom: 8px;
  }

  .vote-option {
    font-weight: bold;
    margin-right: 15px;
    color: #0071bc;
  }

  .vote-location {
    flex: 1;
  }

  .no-votes {
    padding: 10px;
    color: #6c757d;
    font-style: italic;
    text-align: center;
  }

  #vote-map {
    height: 400px;
    width: 100%;
    margin: 20px 0;
    border-radius: 4px;
    border: 1px solid #e9ecef;
  }

  .map-container {
    position: relative;
  }

  .map-legend {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background: white;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #e9ecef;
    z-index: 1000;
  }

  .legend-item {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
  }

  .legend-color {
    width: 15px;
    height: 15px;
    margin-right: 5px;
    border-radius: 50%;
  }
</style>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="/socket.io/socket.io.js"></script>

<main class="container">
  <h2><%= poll.title %></h2>
  <p>Ends: <%= poll.endTime.toLocaleString() %></p>
  <p>Time Left: <span id="timer"></span></p>

  <div class="poll-options">
    <% poll.options.forEach((opt, i) => { %>
      <div class="option">
        <button class="vote-btn" data-index="<%= i %>"><%= opt.text %></button>
        <span class="votes">(<%= opt.votes %>)</span>
      </div>
    <% }) %>
  </div>

  <% if (isCreator) { %>
    <div class="export-buttons" style="margin: 20px 0;">
      <a href="/poll/<%= poll._id %>/export/csv" class="btn btn-primary">Export CSV</a>
      <a href="/poll/<%= poll._id %>/export/pdf" class="btn btn-primary">Export PDF</a>
    </div>
  <% } %>

  <div class="vote-visualization">
    <h3>Vote Locations Map</h3>
    <div class="map-container">
      <div id="vote-map"></div>
      <div class="map-legend" id="map-legend"></div>
    </div>
  </div>

  <div class="vote-history">
    <h3>Vote Locations</h3>
    <div id="vote-list" class="vote-list">
      <div class="no-votes">Loading vote locations...</div>
    </div>
    <button onclick="fetchVoteLocationsAndUpdateMap()" class="btn btn-primary">
      Refresh Vote Locations
    </button>
  </div>

  <div class="debug-info mt-4" style="border: 1px solid #eee; padding: 10px; margin-top: 20px; display: none;">
    <h5>Debug Information</h5>
    <pre id="debug-output" style="background: #f8f9fa; padding: 10px; overflow: auto;"></pre>
    <button id="toggle-debug" class="btn btn-sm btn-secondary">Show Debug Info</button>
  </div>
</main>

<%- include('partials/footer') %>

<script>
  let pollTimeLeft = parseInt('<%= timeLeft %>');
  const timerElement = document.getElementById('timer');

  function updateTimer() {
    const minutes = Math.floor(pollTimeLeft / 60);
    const seconds = pollTimeLeft % 60;
    timerElement.textContent = `${minutes}m ${seconds}s`;
    if (pollTimeLeft <= 0) {
      timerElement.textContent = 'Poll Ended';
      document.querySelectorAll('.vote-btn').forEach(btn => btn.disabled = true);
    } else {
      pollTimeLeft--;
      setTimeout(updateTimer, 1000);
    }
  }

  if (pollTimeLeft > 0) updateTimer();
  else {
    timerElement.textContent = 'Poll Ended';
    document.querySelectorAll('.vote-btn').forEach(btn => btn.disabled = true);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const debugOutput = document.getElementById('debug-output');
    const toggleDebugBtn = document.getElementById('toggle-debug');
    const debugInfo = document.querySelector('.debug-info');
    const pollId = window.location.pathname.split('/')[2];
    const voteListElement = document.getElementById('vote-list');
    let map = L.map('vote-map').setView([20, 0], 2);
    let markers = [];
    let optionColors = {};

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    toggleDebugBtn.addEventListener('click', () => {
      debugInfo.style.display = debugInfo.style.display === 'none' ? 'block' : 'none';
      toggleDebugBtn.textContent = debugInfo.style.display === 'none' ? 'Show Debug Info' : 'Hide Debug Info';
    });

    function logDebug(message, data) {
      const timestamp = new Date().toLocaleTimeString();
      debugOutput.textContent += `[${timestamp}] ${message}${data ? '\n' + JSON.stringify(data, null, 2) : ''}\n`;
      debugOutput.scrollTop = debugOutput.scrollHeight;
      console.log(message, data);
    }

    function generateOptionColors(options) {
      const colors = ['#FF5733', '#33FF57', '#3357FF', '#F033FF', '#FF33F0', '#33FFF0', '#F0FF33', '#FF8C33', '#338CFF', '#FF338C'];
      return options.reduce((map, opt, i) => ({ ...map, [opt]: colors[i % colors.length] }), {});
    }

    function updateMap(locations) {
      markers.forEach(marker => map.removeLayer(marker));
      markers = [];
      const bounds = L.latLngBounds();
      const uniqueOptions = [...new Set(locations.map(v => v.optionText).filter(Boolean))];
      optionColors = generateOptionColors(uniqueOptions);
      updateLegend(uniqueOptions);

      let validLocations = 0;
      locations.forEach(vote => {
        if (!vote.location) return;
        const lat = parseFloat(vote.location.latitude);
        const lng = parseFloat(vote.location.longitude);
        if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) return;

        validLocations++;
        const color = optionColors[vote.optionText] || '#3388ff';
        const markerIcon = L.divIcon({
          html: `<div style="background-color: ${color}; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white;"></div>`,
          iconSize: [16, 16],
          iconAnchor: [8, 8]
        });
        const popupContent = `
          <strong>${vote.optionText || 'Unknown'}</strong><br>
          ${vote.location.city || 'Unknown'}, ${vote.location.country || 'Unknown'}<br>
          Time: ${new Date(vote.timestamp || vote.createdAt).toLocaleString()}
        `;
        const marker = L.marker([lat, lng], { icon: markerIcon }).bindPopup(popupContent).addTo(map);
        markers.push(marker);
        bounds.extend([lat, lng]);
      });

      if (validLocations > 0) map.fitBounds(bounds, { padding: [30, 30], maxZoom: 12 });
      else map.setView([20, 0], 2);
      logDebug(`Map updated with ${validLocations} markers`);
    }

    function updateLegend(options) {
      const legendElement = document.getElementById('map-legend');
      legendElement.innerHTML = '<h6>Vote Options</h6>';
      options.forEach(opt => {
        legendElement.innerHTML += `
          <div class="legend-item">
            <div class="legend-color" style="background-color: ${optionColors[opt]};"></div>
            <div>${opt}</div>
          </div>
        `;
      });
    }

    async function getUserLocation() {
      try {
        const response = await fetch('https://ipapi.co/json/');
        if (response.ok) {
          const data = await response.json();
          logDebug('Location from ipapi.co:', data);
          return {
            city: data.city || 'Unknown City',
            country: data.country_name || 'Unknown Country',
            latitude: data.latitude,
            longitude: data.longitude
          };
        }
      } catch (error) {
        logDebug('Location fetch error:', error.message);
      }
      return { city: 'Unknown City', country: 'Unknown Country', latitude: null, longitude: null };
    }

    document.querySelectorAll('.vote-btn').forEach(btn => {
      btn.addEventListener('click', async () => {
        if (pollTimeLeft <= 0) return alert('Poll has ended');
        const optionIndex = btn.getAttribute('data-index');
        const optionText = btn.textContent.trim();
        try {
          const location = await getUserLocation();
          const response = await fetch(`/poll/${pollId}/vote`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ optionIndex: parseInt(optionIndex), location })
          });
          if (response.ok) {
            alert('Vote submitted!');
            document.querySelectorAll('.vote-btn').forEach(b => b.disabled = true);
          } else {
            throw new Error((await response.json()).error || 'Vote failed');
          }
        } catch (error) {
          logDebug('Vote error:', error.message);
          alert(`Error: ${error.message}`);
        }
      });
    });

    window.fetchVoteLocationsAndUpdateMap = async () => {
      try {
        voteListElement.innerHTML = '<div class="no-votes">Loading vote locations...</div>';
        const response = await fetch(`/api/poll/${pollId}/locations`);
        const data = await response.json();
        logDebug('Vote locations fetched:', data);

        if (data.status === 'success' && data.locations?.length) {
          voteListElement.innerHTML = '';
          data.locations.forEach(vote => {
            const locationText = `${vote.location?.city || 'Unknown'}, ${vote.location?.country || 'Unknown'}`;
            const coords = vote.location?.latitude && vote.location?.longitude ?
              `Lat: ${parseFloat(vote.location.latitude).toFixed(4)}, Lng: ${parseFloat(vote.location.longitude).toFixed(4)}` :
              'No coordinates available';
            const time = new Date(vote.timestamp || vote.createdAt).toLocaleString();
            voteListElement.innerHTML += `
              <div class="vote-item">
                <div class="vote-option">${vote.optionText || 'Unknown'}</div>
                <div class="vote-location">
                  📍 ${locationText}<br>
                  🌐 ${coords}<br>
                  🕒 ${time}
                </div>
              </div>
            `;
          });
          updateMap(data.locations);
        } else {
          voteListElement.innerHTML = '<div class="no-votes">No votes found</div>';
          updateMap([]);
        }
      } catch (error) {
        logDebug('Fetch error:', error.message);
        voteListElement.innerHTML = `<div class="no-votes">Error: ${error.message}</div>`;
      }
    };

    fetchVoteLocationsAndUpdateMap();

    const socket = io();
    socket.emit('joinPoll', pollId);
    socket.on('voteLocation', data => {
      logDebug('Real-time vote received:', data);
      fetchVoteLocationsAndUpdateMap();
    });
    socket.on('updatePoll', data => {
      logDebug('Poll updated:', data);
      document.querySelectorAll('.votes').forEach((span, i) => {
        span.textContent = `(${data.options[i].votes})`;
      });
    });
  });
</script>